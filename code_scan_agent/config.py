"""
Configuration Management

Module qu·∫£n l√Ω c·∫•u h√¨nh t·∫≠p trung cho Code Scan Agent.
H·ªó tr·ª£ c·∫•u h√¨nh qua file .env, environment variables v√† config file.
"""

import os
import logging
from typing import Dict, Any, Optional
from pathlib import Path

# C·∫•u h√¨nh logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Default configuration
DEFAULT_CONFIG = {
    # Semgrep client configuration
    "SEMGREP_TIMEOUT": 30,
    "SEMGREP_MAX_RETRIES": 3,
    "SEMGREP_DEFAULT_RULES": "auto",
    
    # Scanning limits
    "MAX_FILE_SIZE_MB": 10,
    "MAX_SCAN_TIMEOUT": 300,
    "MAX_CONCURRENT_SCANS": 4,
    
    # Intelligent scanning
    "INTELLIGENT_SCANNING_ENABLED": True,
    "INTELLIGENT_PRIORITY_THRESHOLD": "medium",
    "INTELLIGENT_MAX_SAMPLE_FILES": 20,
    
    # Feature flags
    "ENABLE_CIRCUIT_BREAKER": True,
    "DETAILED_ERROR_REPORTING": True,
    "ENABLE_PERFORMANCE_MONITORING": True,
    
    # Paths
    "TEMP_DIR": "/tmp/code_scan_agent",
}


class ConfigManager:
    """
    Qu·∫£n l√Ω c·∫•u h√¨nh t·∫≠p trung cho Code Scan Agent.
    Cung c·∫•p interface th·ªëng nh·∫•t ƒë·ªÉ truy c·∫≠p c·∫•u h√¨nh t·ª´ c√°c module kh√°c.
    """
    
    _instance = None
    _config = {}
    
    def __new__(cls, *args, **kwargs):
        """Singleton pattern ƒë·ªÉ ƒë·∫£m b·∫£o ch·ªâ c√≥ m·ªôt instance c·ªßa ConfigManager"""
        if cls._instance is None:
            cls._instance = super().__new__(cls)
            cls._instance._initialized = False
        return cls._instance
    
    def __init__(self, config_file: Optional[str] = None):
        """
        Kh·ªüi t·∫°o ConfigManager v·ªõi config t·ª´ file v√† environment
        
        Args:
            config_file: ƒê∆∞·ªùng d·∫´n ƒë·∫øn file c·∫•u h√¨nh (optional)
        """
        if self._initialized:
            return
            
        # Load default config
        self._config = DEFAULT_CONFIG.copy()
        
        # Load from environment variables
        self._load_from_env()
        
        # Load t·ª´ .env file n·∫øu c√≥
        self._load_dotenv()
        
        # Load t·ª´ config file n·∫øu c√≥
        if config_file:
            self._load_from_file(config_file)
            
        self._initialized = True
        logger.debug("ConfigManager initialized")
    
    def _load_from_env(self):
        """Load c·∫•u h√¨nh t·ª´ environment variables"""
        for key in DEFAULT_CONFIG:
            env_value = os.environ.get(key)
            if env_value is not None:
                # Convert t·ª´ string sang ƒë√∫ng ki·ªÉu d·ªØ li·ªáu
                default_value = DEFAULT_CONFIG[key]
                if isinstance(default_value, bool):
                    self._config[key] = env_value.lower() in ('true', '1', 'yes')
                elif isinstance(default_value, int):
                    self._config[key] = int(env_value)
                elif isinstance(default_value, float):
                    self._config[key] = float(env_value)
                else:
                    self._config[key] = env_value
    
    def _load_dotenv(self):
        """Load c·∫•u h√¨nh t·ª´ file .env n·∫øu c√≥"""
        try:
            from dotenv import load_dotenv
            env_path = Path(__file__).parent / '.env'
            if env_path.exists():
                load_dotenv(dotenv_path=env_path)
                # Reload t·ª´ env sau khi load .env
                self._load_from_env()
                logger.debug(f"Loaded configuration from {env_path}")
        except ImportError:
            logger.debug("python-dotenv not installed, skipping .env file")
    
    def _load_from_file(self, config_file: str):
        """Load c·∫•u h√¨nh t·ª´ file (JSON or YAML)"""
        config_path = Path(config_file)
        if not config_path.exists():
            logger.warning(f"Config file not found: {config_file}")
            return
            
        try:
            if config_path.suffix.lower() == '.json':
                import json
                with open(config_path, 'r') as f:
                    file_config = json.load(f)
                    self._config.update(file_config)
                    logger.debug(f"Loaded JSON config from {config_file}")
                    
            elif config_path.suffix.lower() in ('.yaml', '.yml'):
                try:
                    import yaml
                    with open(config_path, 'r') as f:
                        file_config = yaml.safe_load(f)
                        if file_config:
                            self._config.update(file_config)
                            logger.debug(f"Loaded YAML config from {config_file}")
                except ImportError:
                    logger.warning("PyYAML not installed, cannot load YAML config")
            else:
                logger.warning(f"Unsupported config file format: {config_path.suffix}")
        except Exception as e:
            logger.error(f"Error loading config from file {config_file}: {e}")
    
    def get(self, key: str, default: Any = None) -> Any:
        """
        Get gi√° tr·ªã c·∫•u h√¨nh theo key
        
        Args:
            key: T√™n c·ªßa c·∫•u h√¨nh c·∫ßn l·∫•y
            default: Gi√° tr·ªã m·∫∑c ƒë·ªãnh n·∫øu key kh√¥ng t·ªìn t·∫°i
            
        Returns:
            Gi√° tr·ªã c·∫•u h√¨nh ho·∫∑c default value
        """
        return self._config.get(key, default)
    
    def set(self, key: str, value: Any) -> None:
        """
        Set gi√° tr·ªã c·∫•u h√¨nh runtime
        
        Args:
            key: T√™n c·ªßa c·∫•u h√¨nh c·∫ßn set
            value: Gi√° tr·ªã m·ªõi
        """
        self._config[key] = value
        logger.debug(f"Set config {key}={value}")
    
    def get_all(self) -> Dict[str, Any]:
        """
        Get t·∫•t c·∫£ c·∫•u h√¨nh hi·ªán t·∫°i
        
        Returns:
            Dict ch·ª©a t·∫•t c·∫£ c·∫•u h√¨nh
        """
        return self._config.copy()
    
    def print_config(self) -> None:
        """
        In ra t·∫•t c·∫£ c·∫•u h√¨nh hi·ªán t·∫°i
        H·ªØu √≠ch cho debugging v√† testing
        """
        print("\nüìã Current Configuration:")
        print("-" * 40)
        for key, value in sorted(self._config.items()):
            print(f"   ‚Ä¢ {key}: {value}")
        print("-" * 40)
    
    def validate(self) -> bool:
        """
        Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa c·∫•u h√¨nh
        
        Returns:
            True n·∫øu c·∫•u h√¨nh h·ª£p l·ªá, False n·∫øu kh√¥ng
        """
        # Ki·ªÉm tra c√°c gi√° tr·ªã b·∫Øt bu·ªôc
        required_keys = [
            "SEMGREP_TIMEOUT", 
            "SEMGREP_DEFAULT_RULES",
            "MAX_FILE_SIZE_MB"
        ]
        
        for key in required_keys:
            if key not in self._config:
                logger.error(f"Missing required config: {key}")
                return False
        
        # Ki·ªÉm tra gi√° tr·ªã h·ª£p l·ªá
        if self._config.get("SEMGREP_TIMEOUT", 0) <= 0:
            logger.error("SEMGREP_TIMEOUT must be positive")
            return False
            
        if self._config.get("MAX_FILE_SIZE_MB", 0) <= 0:
            logger.error("MAX_FILE_SIZE_MB must be positive")
            return False
        
        return True


# Global instance for easy import
config = ConfigManager()


def get_config() -> ConfigManager:
    """L·∫•y instance c·∫•u h√¨nh global"""
    return config 