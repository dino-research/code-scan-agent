"""
Configuration module cho Code Scan Agent
"""
import os
from pathlib import Path
from typing import Optional


class Config:
    """L·ªõp qu·∫£n l√Ω c·∫•u h√¨nh cho agent"""
    
    def __init__(self):
        """Kh·ªüi t·∫°o c·∫•u h√¨nh t·ª´ environment variables"""
        # Load .env file n·∫øu c√≥
        self._load_dotenv()
        
        # ADK Configuration
        self.google_genai_use_vertexai = os.getenv("GOOGLE_GENAI_USE_VERTEXAI", "FALSE").upper() == "TRUE"
        self.google_api_key = os.getenv("GOOGLE_API_KEY")
        self.google_cloud_project = os.getenv("GOOGLE_CLOUD_PROJECT")
        self.google_cloud_location = os.getenv("GOOGLE_CLOUD_LOCATION", "us-central1")
        
        # Logging
        self.log_level = os.getenv("LOG_LEVEL", "INFO")
        
    def _load_dotenv(self):
        """Load .env file n·∫øu c√≥"""
        try:
            from dotenv import load_dotenv
            env_file = Path(__file__).parent / ".env"
            if env_file.exists():
                load_dotenv(env_file)
        except ImportError:
            # python-dotenv kh√¥ng c√≥ s·∫µn
            pass
    
    def validate(self) -> bool:
        """
        Ki·ªÉm tra c·∫•u h√¨nh c√≥ h·ª£p l·ªá kh√¥ng
        
        Returns:
            bool: True n·∫øu c·∫•u h√¨nh h·ª£p l·ªá
        """
        if self.google_genai_use_vertexai:
            # Vertex AI mode
            if not self.google_cloud_project:
                print("‚ùå L·ªói: GOOGLE_CLOUD_PROJECT kh√¥ng ƒë∆∞·ª£c thi·∫øt l·∫≠p")
                return False
        else:
            # Google AI Studio mode
            if not self.google_api_key:
                print("‚ùå L·ªói: GOOGLE_API_KEY kh√¥ng ƒë∆∞·ª£c thi·∫øt l·∫≠p")
                return False
        
        return True
    
    def print_config(self):
        """In ra c·∫•u h√¨nh hi·ªán t·∫°i (·∫©n th√¥ng tin nh·∫°y c·∫£m)"""
        print("üîß C·∫•u h√¨nh Code Scan Agent:")
        print(f"   ‚Ä¢ ADK Mode: {'Vertex AI' if self.google_genai_use_vertexai else 'Google AI Studio'}")
        
        if self.google_genai_use_vertexai:
            print(f"   ‚Ä¢ Project: {self.google_cloud_project}")
            print(f"   ‚Ä¢ Location: {self.google_cloud_location}")
        else:
            api_key_display = f"{self.google_api_key[:8]}..." if self.google_api_key else "Ch∆∞a thi·∫øt l·∫≠p"
            print(f"   ‚Ä¢ API Key: {api_key_display}")
        
        print(f"   ‚Ä¢ Log Level: {self.log_level}")
    
    def setup_instructions(self):
        """In h∆∞·ªõng d·∫´n thi·∫øt l·∫≠p c·∫•u h√¨nh"""
        print("\nüìã H∆∞·ªõng d·∫´n thi·∫øt l·∫≠p:")
        print("\n1. T·∫°o file .env trong th∆∞ m·ª•c code_scan_agent:")
        print("   cp code_scan_agent/config.py code_scan_agent/.env")
        
        print("\n2. Thi·∫øt l·∫≠p authentication cho ADK:")
        print("   Ph∆∞∆°ng th·ª©c A - Google AI Studio (d·ªÖ h∆°n):")
        print("   ‚Ä¢ L·∫•y API key t·ª´: https://aistudio.google.com/app/apikey")
        print("   ‚Ä¢ Th√™m v√†o .env: GOOGLE_API_KEY=your_api_key_here")
        print("   ‚Ä¢ Th√™m v√†o .env: GOOGLE_GENAI_USE_VERTEXAI=FALSE")
        
        print("\n   Ph∆∞∆°ng th·ª©c B - Google Cloud Vertex AI:")
        print("   ‚Ä¢ Thi·∫øt l·∫≠p gcloud CLI v√† authenticate")
        print("   ‚Ä¢ Th√™m v√†o .env: GOOGLE_CLOUD_PROJECT=your_project_id")
        print("   ‚Ä¢ Th√™m v√†o .env: GOOGLE_GENAI_USE_VERTEXAI=TRUE")
        
        print("\n3. C√†i ƒë·∫∑t dependencies:")
        print("   uv install")


# Global config instance
config = Config()


def get_config() -> Config:
    """L·∫•y instance c·∫•u h√¨nh global"""
    return config 