#!/usr/bin/env python3
"""
Simple script ƒë·ªÉ ch·∫°y Code Scan Agent
"""
import sys
from pathlib import Path

# Add project root to path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

from code_scan_agent.config import get_config
from code_scan_agent.agent import (
    scan_code_directory,
    scan_code_files, 
    quick_security_check,
    get_supported_languages,
    analyze_code_structure
)

def print_banner():
    """In banner cho Code Scan Agent"""
    print("=" * 60)
    print("üîç CODE SCAN AGENT")
    print("Powered by Semgrep MCP & Google ADK")
    print("=" * 60)

def show_menu():
    """Hi·ªÉn th·ªã menu l·ª±a ch·ªçn"""
    print("\nüìã Ch·ªçn ch·ª©c nƒÉng:")
    print("1. üìÅ Scan th∆∞ m·ª•c")
    print("2. üìÑ Scan file c·ª• th·ªÉ")
    print("3. üîç Quick security check (paste code)")
    print("4. üåç Xem ng√¥n ng·ªØ ƒë∆∞·ª£c h·ªó tr·ª£")
    print("5. üö™ Tho√°t")
    return input("\nL·ª±a ch·ªçn (1-5): ").strip()

def scan_directory_interactive():
    """Scan th∆∞ m·ª•c t∆∞∆°ng t√°c"""
    path = input("üìÅ Nh·∫≠p ƒë∆∞·ªùng d·∫´n th∆∞ m·ª•c c·∫ßn scan: ").strip()
    if not path:
        print("‚ùå Vui l√≤ng nh·∫≠p ƒë∆∞·ªùng d·∫´n!")
        return
    
    print(f"\nüîç ƒêang scan th∆∞ m·ª•c: {path}")
    print("‚è≥ Vui l√≤ng ƒë·ª£i...")
    
    result = scan_code_directory(path)
    
    if result["status"] == "success":
        if result.get("total_findings", 0) > 0:
            print(f"\nüö® {result['summary']}")
            
            severity = result.get("severity_breakdown", {})
            if severity:
                print(f"üìä Ph√¢n t√≠ch theo m·ª©c ƒë·ªô:")
                for level, count in severity.items():
                    print(f"   ‚Ä¢ {level}: {count}")
            
            findings = result.get("detailed_results", [])
            if findings:
                print(f"\nüìã Chi ti·∫øt v·∫•n ƒë·ªÅ (hi·ªÉn th·ªã t·ªëi ƒëa 5):")
                for i, finding in enumerate(findings[:5], 1):
                    rule_id = finding.get("check_id", "unknown")
                    message = finding.get("extra", {}).get("message", "No message")
                    file_path = finding.get("path", "unknown file")
                    line = finding.get("start", {}).get("line", "?")
                    
                    print(f"\n   {i}. üî¥ {rule_id}")
                    print(f"      üìÅ File: {file_path}:{line}")
                    print(f"      üí¨ {message}")
        else:
            print(f"\n‚úÖ {result['summary']}")
    else:
        print(f"\n‚ùå L·ªói: {result.get('error_message', 'Unknown error')}")

def scan_files_interactive():
    """Scan files t∆∞∆°ng t√°c"""
    files_input = input("üìÑ Nh·∫≠p ƒë∆∞·ªùng d·∫´n file(s) c·∫ßn scan (c√°ch nhau b·∫±ng d·∫•u ph·∫©y): ").strip()
    if not files_input:
        print("‚ùå Vui l√≤ng nh·∫≠p ƒë∆∞·ªùng d·∫´n file!")
        return
    
    file_paths = [f.strip() for f in files_input.split(",")]
    
    print(f"\nüîç ƒêang scan {len(file_paths)} file(s)")
    print("‚è≥ Vui l√≤ng ƒë·ª£i...")
    
    result = scan_code_files(file_paths)
    
    if result["status"] == "success":
        print(f"\n‚úÖ Scan ho√†n t·∫•t!")
        print(f"üìä ƒê√£ scan {result['files_scanned']} file(s)")
        
        scan_result = result.get("result", {})
        if "content" in scan_result:
            findings = scan_result["content"]
            if isinstance(findings, list) and findings:
                print(f"üö® T√¨m th·∫•y {len(findings)} v·∫•n ƒë·ªÅ!")
                
                for i, finding in enumerate(findings[:3], 1):
                    rule_id = finding.get("check_id", "unknown")
                    message = finding.get("extra", {}).get("message", "No message")
                    print(f"   {i}. {rule_id}: {message}")
            else:
                print("‚úÖ Kh√¥ng t√¨m th·∫•y v·∫•n ƒë·ªÅ b·∫£o m·∫≠t!")
    else:
        print(f"\n‚ùå L·ªói: {result.get('error_message', 'Unknown error')}")

def quick_check_interactive():
    """Quick security check t∆∞∆°ng t√°c"""
    print("üîç Quick Security Check")
    print("Paste code c·ªßa b·∫°n (nh·∫•n Enter 2 l·∫ßn ƒë·ªÉ k·∫øt th√∫c):")
    
    code_lines = []
    empty_count = 0
    
    while True:
        line = input()
        if line == "":
            empty_count += 1
            if empty_count >= 2:
                break
        else:
            empty_count = 0
        code_lines.append(line)
    
    if not code_lines or not any(line.strip() for line in code_lines):
        print("‚ùå Kh√¥ng c√≥ code ƒë·ªÉ scan!")
        return
    
    code_content = "\n".join(code_lines)
    language = input("\nüåç Nh·∫≠p ng√¥n ng·ªØ (python/javascript/java/...): ").strip() or "python"
    
    print(f"\nüîç ƒêang scan code {language}")
    print("‚è≥ Vui l√≤ng ƒë·ª£i...")
    
    result = quick_security_check(code_content, language)
    
    if result["status"] == "success":
        scan_result = result.get("result", {})
        if "content" in scan_result:
            findings = scan_result["content"]
            if isinstance(findings, list) and findings:
                print(f"\nüö® T√¨m th·∫•y {len(findings)} v·∫•n ƒë·ªÅ b·∫£o m·∫≠t!")
                
                for i, finding in enumerate(findings, 1):
                    rule_id = finding.get("check_id", "unknown")
                    message = finding.get("extra", {}).get("message", "No message")
                    severity = finding.get("extra", {}).get("severity", "unknown")
                    
                    print(f"\n   {i}. üî¥ {rule_id} ({severity})")
                    print(f"      üí¨ {message}")
                    
                    # Show code snippet if available
                    if "start" in finding and "end" in finding:
                        start_line = finding["start"].get("line", 1)
                        end_line = finding["end"].get("line", start_line)
                        print(f"      üìç D√≤ng {start_line}-{end_line}")
            else:
                print("\n‚úÖ Kh√¥ng t√¨m th·∫•y v·∫•n ƒë·ªÅ b·∫£o m·∫≠t!")
    else:
        print(f"\n‚ùå L·ªói: {result.get('error_message', 'Unknown error')}")

def show_supported_languages():
    """Hi·ªÉn th·ªã ng√¥n ng·ªØ ƒë∆∞·ª£c h·ªó tr·ª£"""
    print("\nüåç ƒêang l·∫•y danh s√°ch ng√¥n ng·ªØ ƒë∆∞·ª£c h·ªó tr·ª£...")
    
    result = get_supported_languages()
    
    if result["status"] == "success":
        languages = result.get("supported_languages", [])
        if languages and isinstance(languages, list):
            # Parse the response - it seems to be in a different format
            if len(languages) > 0 and isinstance(languages[0], dict):
                lang_text = languages[0].get("text", "")
                if "supported languages are:" in lang_text:
                    lang_list = lang_text.split("supported languages are:")[1].strip()
                    lang_items = [lang.strip() for lang in lang_list.split(",")]
                    
                    print(f"\nüìã Semgrep h·ªó tr·ª£ {len(lang_items)} ng√¥n ng·ªØ:")
                    
                    # Group by first letter for better display
                    grouped = {}
                    for lang in sorted(lang_items):
                        first_char = lang[0].upper()
                        if first_char not in grouped:
                            grouped[first_char] = []
                        grouped[first_char].append(lang)
                    
                    for letter in sorted(grouped.keys()):
                        print(f"\n   {letter}: {', '.join(grouped[letter])}")
                else:
                    print(f"‚úÖ T·ªïng c·ªông: {len(languages)} ng√¥n ng·ªØ")
                    print("   Sample:", languages[:10])
            else:
                print(f"‚úÖ T·ªïng c·ªông: {len(languages)} ng√¥n ng·ªØ")
                print("   Sample:", languages[:10])
        else:
            print("‚ö†Ô∏è  Kh√¥ng c√≥ th√¥ng tin ng√¥n ng·ªØ")
    else:
        print(f"‚ùå L·ªói: {result.get('error_message', 'Unknown error')}")

def main():
    """H√†m ch√≠nh"""
    print_banner()
    
    # Ki·ªÉm tra c·∫•u h√¨nh
    config = get_config()
    if not config.validate():
        print("‚ùå C·∫•u h√¨nh kh√¥ng h·ª£p l·ªá!")
        print("üîß Vui l√≤ng ki·ªÉm tra file .env")
        return 1
    
    print("‚úÖ C·∫•u h√¨nh h·ª£p l·ªá!")
    print("üöÄ Code Scan Agent s·∫µn s√†ng!")
    
    while True:
        try:
            choice = show_menu()
            
            if choice == "1":
                scan_directory_interactive()
            elif choice == "2":
                scan_files_interactive() 
            elif choice == "3":
                quick_check_interactive()
            elif choice == "4":
                show_supported_languages()
            elif choice == "5":
                print("\nüëã T·∫°m bi·ªát!")
                break
            else:
                print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")
            
            input("\nNh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
            
        except KeyboardInterrupt:
            print("\n\nüëã T·∫°m bi·ªát!")
            break
        except Exception as e:
            print(f"\n‚ùå L·ªói: {e}")
            input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
    
    return 0

if __name__ == "__main__":
    sys.exit(main()) 